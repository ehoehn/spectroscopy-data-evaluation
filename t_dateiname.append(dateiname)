[1mdiff --git a/Ramanspektren/graph.py b/Ramanspektren/graph.py[m
[1mindex c572717..b22608e 100644[m
[1m--- a/Ramanspektren/graph.py[m
[1m+++ b/Ramanspektren/graph.py[m
[36m@@ -25,9 +25,9 @@[m [mdef plotly_xy_yFehler_data(x_values, y_values, errorx_values, errory_values, err[m
     names = [][m
     for k in y_values:[m
         nr = k.split('_')[m
[31m-        n = nr[7][m
[31m-      #  r = n.split('n')[m
[31m-        #print(r)[m
[32m+[m[32m        n = nr[5][m
[32m+[m[32m        print(nr)[m
[32m+[m[32m        r = n.split('n')[m
         names.append(n)[m
 [m
     traces = [][m
[36m@@ -143,8 +143,9 @@[m [mfor dateiname in os.listdir():[m
         print(dateiname)[m
         with open(dateiname) as fd:[m
             df = pd.read_csv(fd, index_col=0, header=0, sep=';')[m
[31m-            #print(df)[m
[31m-            x = df.iloc[:,0][m
[31m-            y = pd.DataFrame(df.iloc[:,1:])[m
[31m-[m
[31m-            plotly_xy_yFehler(x_values=x, y_values=y, x_range=[0,50], y_range=[0,150], dateiname=dateiname, suffix_for_new_filename=suffix_for_new_filename, xaxis_title='time [s]', yaxis_title='intensity [a. u.]')[m
[32m+[m[32m         #   print(df)[m
[32m+[m[32m            x = df.iloc[:, 0][m
[32m+[m[32m            print(x)[m
[32m+[m[32m            y = pd.DataFrame(df.iloc[:, 1:])[m
[32m+[m[32m            print(y)[m
[32m+[m[32m            plotly_xy_yFehler(x_values=x, y_values=y, x_range=[0,50], y_range=[0,150], dateiname=dateiname, suffix_for_new_filename=suffix_for_new_filename, xaxis_title='time [s]', yaxis_title='norm. intensity [a. u.]')[m
[1mdiff --git a/Ramanspektren/lib/auswertung.py b/Ramanspektren/lib/auswertung.py[m
[1mindex cb21658..d6047e4 100644[m
[1m--- a/Ramanspektren/lib/auswertung.py[m
[1m+++ b/Ramanspektren/lib/auswertung.py[m
[36m@@ -1,5 +1,6 @@[m
 import pandas as pd[m
 import scipy.signal[m
[32m+[m[32mimport regex as re[m
 [m
 [m
 def compute_wn_with_highest_intensity(df_korregiert, band_start, band_end):[m
[36m@@ -7,6 +8,21 @@[m [mdef compute_wn_with_highest_intensity(df_korregiert, band_start, band_end):[m
     wn_with_highest_intensity = interval.idxmax(axis=0)[m
     return wn_with_highest_intensity[m
 [m
[32m+[m[32mdef compute_wn_with_highest_intensity_labelbased(df, band_start, band_end):[m
[32m+[m[32m    ind = df.index.values.tolist()[m
[32m+[m[32m    k = [][m
[32m+[m[32m    for i in ind:[m
[32m+[m[32m        if re.match(str(band_start) + '\.[0-9]+', str(i)):[m
[32m+[m[32m    #        print(i)[m
[32m+[m[32m            break[m
[32m+[m[32m    for j in ind:[m
[32m+[m[32m        if re.match(str(band_end) + '\.[0-9]+', str(j)):[m
[32m+[m[32m     #       print(j)[m
[32m+[m[32m            break[m
[32m+[m[32m    interval = df.loc[i:j][m
[32m+[m[32m    wn_with_highest_intensity = interval.idxmax(axis=0)[m
[32m+[m[32m    return wn_with_highest_intensity[m
[32m+[m
 [m
 def grep_highest_intensity(df_korregiert, wn_with_highest_intensity):[m
     highest_intensity = [][m
[36m@@ -37,6 +53,26 @@[m [mdef compute_frame_with_lowest_intensity(intensities, band_start, band_end):[m
     return framenumber[m
 [m
 [m
[32m+[m[32mdef compute_frame_with_lowest_intensity_labelbased(intensities, band_start, band_end):[m
[32m+[m[32m    ind = intensities.index.values.tolist()[m
[32m+[m[32m  #  print(ind)[m
[32m+[m[32m    k = [][m
[32m+[m[32m    for i in ind:[m
[32m+[m[32m        if re.match(str(band_start) + '\.[0-9]+', str(i)):[m
[32m+[m[32m            #        print(i)[m
[32m+[m[32m            break[m
[32m+[m[32m    for j in ind:[m
[32m+[m[32m        if re.match(str(band_end) + '\.[0-9]+', str(j)):[m
[32m+[m[32m            #       print(j)[m
[32m+[m[32m            break[m
[32m+[m[32m    interval = intensities.loc[i:j][m
[32m+[m[32m    band = interval.idxmax(axis=0)[m
[32m+[m[32m    lowest = band.idxmin()[m
[32m+[m[32m    dfn = lowest.split(' ')[m
[32m+[m[32m    framenumber = int(dfn[1])[m
[32m+[m[32m    return framenumber[m
[32m+[m
[32m+[m
 def compute_frame_with_lowest_intensity_from_smoothed(smoothed):[m
     copy_smoothed = smoothed.copy()[m
     lowest = copy_smoothed.idxmin(axis=1)[m
[1mdiff --git a/Ramanspektren/normalise.py b/Ramanspektren/normalise.py[m
[1mindex 6a1a6d1..b3a0be2 100644[m
[1m--- a/Ramanspektren/normalise.py[m
[1m+++ b/Ramanspektren/normalise.py[m
[36m@@ -77,9 +77,14 @@[m [mfor dateiname in os.listdir():[m
         print(dateiname)[m
         with open(dateiname) as fd:[m
             df = pd.read_csv(fd, index_col=0, header=0, sep=';')[m
[31m-         #   print(df)[m
[32m+[m[32m           # print(df)[m
[32m+[m[32m            # times = pd.DataFrame(df.iloc[:, 0])[m
[32m+[m[32m            # print(times)[m
[32m+[m[32m         #   intensities = pd.DataFrame(df.iloc[:, 1:])[m
[32m+[m[32m           # print(intensities)[m
[32m+[m[32m          #  times = pd.DataFrame(df.iloc[0, 0:]).transpose()[m
[32m+[m[32m            #print(intensities.ix[19])[m
             df2 = df.apply(lambda x: x / df.ix[19] * 100, axis=1)[m
             df2['time [s]'] = df['time [s]'][m
[31m-           # print(df2)[m
[32m+[m[32m         #   print(df2)[m
             df2.to_csv('allIndicatorBandsInOne_normalized.csv', sep=';')[m
[31m-#            plotly_zeitlVerlauf(df2, dateiname, suffix_for_new_filename, axis_title='Frame', yaxis_title='Intensity [a. u.]')[m
[1mdiff --git a/Ramanspektren/smoothning.py b/Ramanspektren/smoothning.py[m
[1mindex 6adf825..9e46a93 100644[m
[1m--- a/Ramanspektren/smoothning.py[m
[1m+++ b/Ramanspektren/smoothning.py[m
[36m@@ -62,6 +62,7 @@[m [mfor dateiname in os.listdir():[m
             df = pd.read_csv(fd, sep=';', header=0, index_col=0) #, names=['time [s]', 'measured voltage [V]', 'leer'])[m
             # df1 = df.apply(pd.to_numeric, errors='raise')[m
             intensities = pd.DataFrame(df.iloc[1:,0:])[m
[32m+[m[32m            print(intensities)[m
             times = pd.DataFrame(df.iloc[0, 0:]).transpose()[m
 [m
             smoothed_intensities = scipy.signal.savgol_filter(intensities, window_length=9, polyorder=1, axis=0, mode='nearest')[m
[1mdiff --git a/Ramanspektren/takeIndicatorBandAndPutInOneFile.py b/Ramanspektren/takeIndicatorBandAndPutInOneFile.py[m
[1mindex 93876b0..2cb78aa 100644[m
[1m--- a/Ramanspektren/takeIndicatorBandAndPutInOneFile.py[m
[1m+++ b/Ramanspektren/takeIndicatorBandAndPutInOneFile.py[m
[36m@@ -9,7 +9,7 @@[m [mimport os[m
 import lib.analyte[m
 from lib.xml_import import get_intensities[m
 from lib.baseline_corr import baselinecorrection[m
[31m-from lib.auswertung import compute_wn_with_highest_intensity[m
[32m+[m[32mfrom lib.auswertung import compute_wn_with_highest_intensity_labelbased[m
 from lib.auswertung import grep_highest_intensity[m
 import pandas as pd[m
 [m
[36m@@ -39,7 +39,9 @@[m [mfor i in range(0, len(list_dateiname)):[m
             df = pd.read_csv(fd, sep=';', header=0, index_col=0)  # , names=['time [s]', 'measured voltage [V]', 'leer'])[m
             times = pd.DataFrame(df.iloc[0, 0:]).transpose()[m
             intensities = pd.DataFrame(df.iloc[1:, 0:])[m
[31m-            wn_with_highest_intensity = compute_wn_with_highest_intensity(intensities, band_start, band_end)[m
[32m+[m[32m        #    print(intensities)[m
[32m+[m[32m            wn_with_highest_intensity = compute_wn_with_highest_intensity_labelbased(intensities, band_start, band_end)[m
[32m+[m[32m         #   print(wn_with_highest_intensity)[m
             highest_intensity = pd.DataFrame(grep_highest_intensity(intensities, wn_with_highest_intensity))[m
             df_a = highest_intensity[m
             df_a = df_a.set_index([[list_dateiname[i]]])[m
[36m@@ -50,12 +52,12 @@[m [mfor i in range(0, len(list_dateiname)):[m
             times = times.set_index([list(range(1, len(times.index) + 1))])[m
             times = times.transpose()[m
             df_a = times.append(df_a)[m
[31m-        #  print(i)[m
[32m+[m[32m      #  print(df_a)[m
     if i is not 0:[m
         with open(list_dateiname[i]) as fd:[m
             df = pd.read_csv(fd, sep=';', header=0, index_col=0)  # , names=['time [s]', 'measured voltage [V]', 'leer'])[m
             intensities = pd.DataFrame(df.iloc[1:, 0:])[m
[31m-            wn_with_highest_intensity = compute_wn_with_highest_intensity(intensities, band_start, band_end)[m
[32m+[m[32m            wn_with_highest_intensity = compute_wn_with_highest_intensity_labelbased(intensities, band_start, band_end)[m
             highest_intensity = pd.DataFrame(grep_highest_intensity(intensities, wn_with_highest_intensity))[m
             df_b = highest_intensity[m
             df_b = df_b.set_index([[list_dateiname[i]]])[m
[1mdiff --git a/Ramanspektren/tvf-TriVista smoothed und bscorr to allRenataGrepIn1.py b/Ramanspektren/tvf-TriVista smoothed und bscorr to allRenataGrepIn1.py[m
[1mindex 69339ee..ee34471 100644[m
[1m--- a/Ramanspektren/tvf-TriVista smoothed und bscorr to allRenataGrepIn1.py[m	
[1m+++ b/Ramanspektren/tvf-TriVista smoothed und bscorr to allRenataGrepIn1.py[m	
[36m@@ -7,14 +7,16 @@[m [moutput file: eine Datei mit zeitl Verlauf in einer Tabelle nach baseline korrekt[m
 [m
 import os[m
 from lib import analyte[m
[31m-from lib.xml_import import get_intensities[m
[32m+[m[32mfrom lib.xml_import import get_intensities, get_times[m
 from lib.baseline_corr import baselinecorrection[m
[31m-from lib.auswertung import compute_wn_with_highest_intensity[m
[32m+[m[32mfrom lib.auswertung import compute_wn_with_highest_intensity_labelbased[m
 from lib.auswertung import grep_highest_intensity[m
[32m+[m[32mimport scipy.signal[m
[32m+[m[32mimport pandas as pd[m
 [m
 [m
 # suffix_for_new_filename = '_graphMapping.html'[m
[31m-punkte_baseline = lib.analyte.kristallviolett_al_Raja()[m
[32m+[m[32mpunkte_baseline = analyte.kristallviolett_al_Raja()[m
 band_start = 1152[m
 band_end = 1215[m
 [m
[36m@@ -28,24 +30,37 @@[m [mfor i in range(0, len(list_dateiname)):[m
     if i == 0:[m
         with open(list_dateiname[i]) as fd:[m
             intensities = get_intensities(list_dateiname[i])[m
[31m-            df_korregiert = baselinecorrection(intensities, punkte_baseline)[m
[31m-            wn_with_highest_intensity = compute_wn_with_highest_intensity(df_korregiert, band_start, band_end)[m
[32m+[m[32m            times = get_times(list_dateiname[i])[m
[32m+[m[32m            smoothed_intensities = scipy.signal.savgol_filter(intensities, window_length=9, polyorder=1, axis=0, mode='nearest')[m
[32m+[m[32m            smoothed_intensities = pd.DataFrame(smoothed_intensities, index=intensities.index, columns=intensities.columns)[m
[32m+[m[32m            df_korregiert = baselinecorrection(smoothed_intensities, punkte_baseline)[m
[32m+[m[32m            wn_with_highest_intensity = compute_wn_with_highest_intensity_labelbased(df_korregiert, band_start, band_end)[m
             highest_intensity = grep_highest_intensity(df_korregiert, wn_with_highest_intensity)[m
             df_a = highest_intensity[m
             df_a = df_a.set_index([[list_dateiname[i]]])[m
[32m+[m[32m            df_a = df_a.transpose()[m
[32m+[m[32m            df_a = df_a.set_index([list(range(1, len(df_a.index) + 1))])[m
[32m+[m[32m            df_a = df_a.transpose()[m
[32m+[m[32m            times = times.transpose()[m
[32m+[m[32m            times = times.set_index([list(range(1, len(times.index) + 1))])[m
[32m+[m[32m            times = times.transpose()[m
[32m+[m[32m            df_a = times.append(df_a)[m
           #  print(i)[m
     if i is not 0:[m
         with open(list_dateiname[i]) as fd:[m
             intensities = get_intensities(list_dateiname[i])[m
[31m-            df_korregiert = baselinecorrection(intensities, punkte_baseline)[m
[31m-            wn_with_highest_intensity = compute_wn_with_highest_intensity(df_korregiert, band_start, band_end)[m
[32m+[m[32m            smoothed_intensities = scipy.signal.savgol_filter(intensities, window_length=9, polyorder=1, axis=0, mode='nearest')[m
[32m+[m[32m            smoothed_intensities = pd.DataFrame(smoothed_intensities, index=intensities.index, columns=intensities.columns)[m
[32m+[m[32m            df_korregiert = baselinecorrection(smoothed_intensities, punkte_baseline)[m
[32m+[m[32m            wn_with_highest_intensity = compute_wn_with_highest_intensity_labelbased(df_korregiert, band_start, band_end)[m
             highest_intensity = grep_highest_intensity(df_korregiert, wn_with_highest_intensity)[m
             df_b = highest_intensity[m
             df_b = df_b.set_index([[list_dateiname[i]]])[m
[31m-           # print(i)[m
[32m+[m[32m            df_b = df_b.transpose()[m
[32m+[m[32m            df_b = df_b.set_index([list(range(1, len(df_b.index) + 1))])[m
[32m+[m[32m            df_b = df_b.transpose()[m
[32m+[m[32m#            # print(i)[m
         df_a = df_a.append(df_b)[m
 [m
[31m-df_a.to_csv('Zusammenfassung_Renata_grep.csv', sep=';')[m
[31m-[m
[31m-[m
[31m-#plotly_zeitlVerlauf_normalisiert(all_highest_intensities)[m
[32m+[m[32mdf_a = df_a.transpose()[m
[32m+[m[32mdf_a.to_csv('smoothed_bscorrOneband_BandsInOne.csv', sep=';')[m
