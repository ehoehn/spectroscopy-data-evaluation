'''imput file: .tvf-TriVista-Datei mit xy-Mappingoutput file: ein Graph mit Positionen eines Mappings (Auto-Zoom ist ausgeglichen)'''#written by EvaMaria Hoehnimport osimport plotlyimport plotly.graph_objs as go  # import Scatter, Layoutfrom lib import analytefrom Ramanspektren.lib.baseline_corr import baselinecorrectionfrom Ramanspektren.lib.xml_import import get_intensitiesfrom Ramanspektren.lib.xml_import import get_positionsfrom Ramanspektren.lib.allgemein import generate_filenamefrom Ramanspektren.lib.auswertung import compute_wn_with_highest_intensityfrom Ramanspektren.lib.auswertung import grep_highest_intensityfrom Ramanspektren.lib.plotlygraphen import viridis_plus_rot, plotly_nach_positionen_3dscatter_layoutsuffix_for_new_filename = '_graphMappingIn2D.html'punkte_baseline = analyte.kristallviolett()band_start = 1605band_end = 1630def plotly_nach_positionen_3dscatter_data(highest_intensity, positions):    print(plotly.__version__)    trace = go.Scatter(        x=positions.ix['x [µm]'].values.tolist(),        y=positions.ix['y [µm]'].values.tolist(),        text=highest_intensity.ix['highest intensity [a. u.]'].values.tolist(),        mode='markers',        marker=dict(            sizemode='diameter',            sizeref=100,  #relative Größe der Marker            sizemin=20,            size=highest_intensity.ix['highest intensity [a. u.]'].values.tolist(),            color=highest_intensity.ix['highest intensity [a. u.]'].values.tolist(),            opacity=0.8,            colorbar=dict(title='Intensity [a.u.]',                          titlefont=dict(family='Arial, sans-serif',                                         size=20,                                         color='#000000'),                          tickfont=dict(family='Arial, sans-serif',                                         size=20,                                         color='#000000')),            colorscale=viridis_plus_rot(),            line=dict(color='rgb(166, 166, 166)',                      width=0)))    data = [trace]    return datadef plotly_nach_positionen(highest_intensity, positions, dateiname):    nwfile = generate_filename(dateiname, suffix_for_new_filename)    fig = dict(data=plotly_nach_positionen_3dscatter_data(highest_intensity, positions), layout=plotly_nach_positionen_3dscatter_layout(x_lables=True, y_lables=True, z_lables=False))    plotly.offline.plot(fig, filename=nwfile,  image_filename=nwfile)  #, image='png', image_width=1600, image_height=860)for dateiname in os.listdir():    if dateiname.endswith('xy.tvf') or dateiname.endswith('xy.TVF'):        print(dateiname)        intensities = get_intensities(dateiname)        df_korregiert = baselinecorrection(intensities, punkte_baseline)        wn_with_highest_intensity = compute_wn_with_highest_intensity(df_korregiert, band_start, band_end)        highest_intensity = grep_highest_intensity(df_korregiert, wn_with_highest_intensity)        try:            positions = get_positions(dateiname)            plotly_nach_positionen(highest_intensity, positions, dateiname)        except:            print('no positions')